import os
from flask import Flask , jsonify
from flask import request
from flask_cors import CORS

import mimetypes
from PIL import Image
import imagehash
import json

import requests
import io
from concurrent.futures import ProcessPoolExecutor

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 2097152

CORS(
    app,
    origins=["http://192.168.1.11:8080", "*"],
    supports_credentials=True
)

# @app.after_request
# def after_request(response):
#   response.headers.add('Access-Control-Allow-Origin', ["http://192.168.1.11:8080/"])
#   response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
#   response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
#   return response


@app.route("/search_text",  methods=["POST"])
def search_text():
  input_text = request.form.get("input_text")
  if len(input_text) >= 100: 
    return jsonify({"error_message": "100文字まで入力できます。"}), 422
  
  with open("lures.json", "r", encoding="utf-8") as f:
    lures = json.load(f)

  with ProcessPoolExecutor(max_workers=8) as executor:
    result_lure = []
    for name, src in lures.items():
      if input_text in name:
        result_lure.append({'name': name, 'src': src})       
  
  return jsonify(result_lure[0:3])  




@app.route("/upload",  methods=["POST"])
def upload():
  upload_file = request.files['upload_file']

  if ("image/" not in upload_file.content_type) or (upload_file.content_type != 'application/octet-stream'):
    if 'image/' not in mimetypes.guess_type(upload_file.filename)[0]:
      return jsonify({"error_message": "画像のみアップロードできます。"}), 422

  upload_image_hash = imagehash.average_hash(Image.open(upload_file)) 
        
  with open("lures.json", "r", encoding="utf-8") as f:
    lures = json.load(f)
    
    
  min = None
  first_lure = None
  second_lure = None
  third_lure = None
  with ProcessPoolExecutor(max_workers=8) as executor:
    for name, src in lures.items():
      print(name)
      # src = url + src.replace('_', '/', -1)
      future = executor.submit(comparison, upload_image_hash, src)
      diff = future.result()

      if min is None:
        min = diff
        first_lure = {'name': name, 'src': src}
        # break
      if min > diff:
        min = diff
        third_lure = second_lure
        second_lure = first_lure
        first_lure = {'name': name, 'src': src}
      if min == 0:
        break
    
    executor.shutdown()
    resultLure = [first_lure, second_lure, third_lure]

  return jsonify(resultLure)  


def comparison(upload_image_hash, src):
  print(src)
  img_hash = imagehash.average_hash(Image.open("./IMAGE/" + src))
  diff = upload_image_hash - img_hash
  
  return diff

if __name__ == "__main__":
  app.run(port=3033, debug=True, threaded=True)